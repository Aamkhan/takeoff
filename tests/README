Test argument/output format:

Class FooTest(TakeOffTest):
  
  """
  Elements of Superclass will be:
  self.status = defaults to False. Set to True before returning method.
  self.output = standard status output that we expect test running to emit.
                return multiple lines as list.
  self.error = If error, send 
  self.debug = list() element. If desired, output verbose output by
              appending text lines to this attribute.

  Wrapper will call each class's test() method, which will run
  test, populate attributes, and then return True or False.
  """
  def __init__(connection_object):

    super(TakeOffTest, self).__init__(connection_object)

  def test():

    # Run arbitrary tests
    self.debug.append("Running this test")

    # Test successful!
    if (<< Tests are successful >>):
      self.output.append("Found X interfaces, all good!")
      self.output.append("Some more useful info here")
      self.status = True
      return True
    if (<< Test failed >>):
      self.error.append("Interface X down.")
      self.error.append("interface Y down.")
      self.status = False
      return False
