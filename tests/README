Test argument/output format:

Class FooTest(TakeOffTest):
  
  """
  Elements of Superclass will be:
  self.status = defaults to False. Set to True before returning method.
  self.output = standard status output that we expect test running to emit.
                return multiple lines as list.
  self.error = If error, send 
  self.debug = list() element. If desired, output verbose output by
              appending text lines to this attribute.

  Calling code will initiate the object, passing in a connection
  object, the hostname, and platform string.
  It will then call the object's test() method (which takes no args).

  test() method is expected to set self.status to True or False, and return
  the same value.
  """
  def __init__(connection_object, hostname, platform):

    super(TakeOffTest, self).__init__(connection_object=connection_object,
                                      hostname=hostname,
                                      platform=platform)
  def test():

    # Run arbitrary tests
    self.debug.append("Running this test")

    # Test successful!
    if (<< Tests are successful >>):
      self.output.append("Found X interfaces, all good!")
      self.output.append("Some more useful info here")
      self.status = True
    elif (<< Test failed >>):
      self.error.append("Interface X down.")
      self.error.append("interface Y down.")
      self.status = False

    return self.status
